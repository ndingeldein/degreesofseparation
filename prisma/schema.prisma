datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String   @id @default(cuid())
  email String   @unique
  name  String
  role  UserRole @default(Basic)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      Password?
  notes         Note[]
  notifications Notification[]

  gamesAsPlayer1   Game[] @relation("Player1Games")
  gamesAsPlayer2   Game[] @relation("Player2Games")
  turns            Turn[]
  currentTurnGames Game[] @relation("CurrentTurn")
}

model Game {
  id                    String            @id @default(cuid())
  player1Id             String
  player2Id             String
  destinationMovieId    Int               @default(5925)
  destinationMovieTitle String            @default("The Great Escape")
  destinationMovieYear  Int               @default(1963)
  turns                 Turn[]
  status                GameStatus        @default(Pending)
  result                GameResult?
  winCondition          GameWinCondition?
  player1               User              @relation("Player1Games", fields: [player1Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  player2               User              @relation("Player2Games", fields: [player2Id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentTurnUser       User?             @relation("CurrentTurn", fields: [currentTurnUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentTurnUserId     String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
}

model Turn {
  id         String     @id @default(cuid())
  gameId     String
  userId     String
  movieId    Int
  movieTitle String
  movieYear  Int
  castIds    Int[]
  commonCast Json?
  guesses    Guess[]
  status     TurnStatus @default(InProgress)
  game       Game       @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Guess {
  id         String   @id @default(cuid())
  turnId     String
  result     Boolean
  movieId    Int
  movieTitle String
  movieYear  Int
  turn       Turn     @relation(fields: [turnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String?  @default("default")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserRole {
  Basic
  Admin
  SuperAdmin
}

enum GameStatus {
  Pending
  Ongoing
  Completed
}

enum GameResult {
  Player1Wins
  Player2Wins
  Draw
  Canceled
}

enum GameWinCondition {
  Draw
  WrongGuess
  DestinationMovie
  Forfeit
}

enum TurnStatus {
  InProgress
  Success
  Fail
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
